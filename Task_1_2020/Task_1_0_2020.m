%---------1---------
%убедимся в том, что y=sin(x) - есть решение нашего диффура.
%Для этого будем использовать функцию DSOLVE. Эта функция ищет решение в
%символьном виде и пытается вернуть решение в квадратурах. Если уравнение 
%содержит неопределенную функцию, то в решении появляются неопределенные
%интегралы.
y=dsolve('Dy=(1-y^2)^(1/2)','y(0)=0')

%теперь найдем численное решение путем использования нескольких схем
%численного интегрирования 

%первый способ - встроенная функция ode45. Предназначена для численного
%интегрирования ОДУ. Любая система нелинейных ОДУ может быть представлена 
%как система дифференциальных уравнений 1-го порядка в явной форме Коши:
%dx/dt=f(x,t). Данная функция интегрирует систему ОДУ, используя форму
%Рунге-Кутты 4-го и 5-го порядка. По умолчанию точность: 10^(-6) (ее также
%можно задать в самой функции). Такие алгоритмы используют тем большее 
%количество шагов, чем медленнее изменяется функция. Поскольку функция 
%ode45 использует формулы более высокого порядка, чем та же функция ode23, 
%обычно требуется меньше шагов интегрирования и результат достигается 
%быстрее.
[T,Y] = ode45(@ur1, [0,3],0);

subplot(4,1,1);
plot(T,Y); 
title('dy/dt=(1-y^2)^1^/^2');
hold on

%второй способ - метод Эйлера. Также называется методом Рунге-Кутта первого
%порядка или методом ломанных. (Методы Рунге-Кутта представляют собой 
%разложения в ряд Тейлора и от количества использованных элементов ряда 
%зависит порядок этого метода). Интервал, на котором ищется решение,
%разбивается на промежутки (вводятся узлы). В них ищется приближенные
%решения по формуле: yi+1 = yi + h*f(xi, yi).
F = @(t,y) (1-y^2)^(1/2);
tI = 0;
tEnd = 3;
dt = 0.05;
t = tI:dt:tEnd;
y = zeros(size(t));
y(1) = 0;
for k = 2:numel(y)
    yPrime = F(t(k-1),y(k-1));
    y(k) = y(k-1) + dt*yPrime;
end

plot(t,y); 

%третий способ - метод Рунге-Кута 4 порядка. Он считается самым 
%распространённым. Тем не менее, работает он аналогично второму и 
%третьему порядку. (Метод Рунге-Кутта второго порядка — это всё тот же 
%метод первого порядка, однако, на половине шага происходит нахождение 
%«первичного» решения, а затем происходит его уточнение. Это позволяет 
%поднять порядок скорости сходимости до двух.) По сравнению с Рунге-Куттом 
%первого порядка изначальная ошибка уже гораздо меньше. Приближенные
%решения находятся по формулам:
%k1=F(xi,yi), k2=F(xi+h/2,yi+h*k1/2), k3=F(xi+h/2,yi+h*k2/2), 
%k4=F(xi+h,yi+ k3h), yi+1=yi+(k1+2k2+2k3+k4)*(h/6).
f=@(x,y) (1-y^2)^(1/2);
x0=0;
y0=0;
xn=3;
n=500;
h=(xn-x0)/n;
x=x0:h:xn;
y = zeros(size(x));
y(1)=y0;
for i=1:n
    k1=f(x(i),y(i));
    k2=f(x(i)+0.5*h,y(i)+0.5*k1*h);
    k3=f(x(i)+0.5*h,y(i)+0.5*k2*h);
    k4=f(x(i)+h,y(i)+k3*h);
    y(i+1)=y(i)+(k1+2*k2+2*k3+k4)*(h/6);
end

plot(x,y); 
legend('ode45','Эйлер','Рунге 4 порядка');
hold off

%Полученные результаты:
%все идет в соответствии с графиком sin(x) до pi/2, далее
%производная от синуса - косинус, а косинус с pi/2 до 3pi/2 принимает 
%отрицательные значения и поэтому у нас выходят комплексные результаты

%-----------2-----------
%аналогично предыдущему зааднию найдем в начале символьное решение
y=dsolve('Dy=1+y^2','y(0)=0')

subplot(4,1,2);

%встроенная функция
[T,Y] = ode45(@ur2, [0,1.5],0);

plot(T,Y); hold on
title('dy/dt=1+y^2');

%метод Эйлера
F = @(t,y) 1+y^2;
tI = 0;
tEnd = 1.5;
dt = 0.001;
t = tI:dt:tEnd;
y = zeros(size(t));
y(1) = 0;
for k = 2:numel(y)
    yPrime = F(t(k-1),y(k-1));
    y(k) = y(k-1) + dt*yPrime;
end

plot(t,y); 
%grid on
%title('Engr')
%xlabel('Time')
%ylabel('y(t)')
%legend(['dt = ' num2str(dt)])

%метод Рунге-Кута 4 порядка
f=@(x,y) 1+y^2;
x0=0;
y0=0;
xn=1.5;
n=500;
h=(xn-x0)/n;
x=x0:h:xn;
y = zeros(size(x));
y(1)=y0;
for i=1:n
    k1=f(x(i),y(i));
    k2=f(x(i)+0.5*h,y(i)+0.5*k1*h);
    k3=f(x(i)+0.5*h,y(i)+0.5*k2*h);
    k4=f(x(i)+h,y(i)+k3*h);
    y(i+1)=y(i)+(k1+2*k2+2*k3+k4)*(h/6);
end

plot(x,y); 
legend('ode45','Эйлер','Рунге 4 порядка');
hold off

%полученные результаты:
%решеним является tg(х), а в точках pi/2 tg(х) уходит на бесконечность

%----------3---------
y=dsolve('Dy=1/(y^3)','y(0)=0')

%встроенная функция
[T,Y] = ode45(@ur3, [0,1],0);

subplot(4,1,3);
plot(T,Y); 
title('dy/dt=1/y^3');
hold on

%метод Эйлера
F = @(t,y) 1/(y^3);
tI = 0;
tEnd = 3;
dt = 0.05;
t = tI:dt:tEnd;
y = zeros(size(t));
y(1) = 0;
for k = 2:numel(y)
    yPrime = F(t(k-1),y(k-1));
    y(k) = y(k-1) + dt*yPrime;
end

plot(t,y); 

%метод Рунге-Кута 4 порядка
f=@(x,y) 1/(y^3);
x0=0;
y0=0;
xn=3;
n=500;
h=(xn-x0)/n;
x=x0:h:xn;
y = zeros(size(x));
y(1)=y0;
for i=2:n
    k1=f(x(i),y(i));
    k2=f(x(i)+0.5*h,y(i)+0.5*k1*h);
    k3=f(x(i)+0.5*h,y(i)+0.5*k2*h);
    k4=f(x(i)+h,y(i)+k3*h);
    y(i+1)=y(i)+(k1+2*k2+2*k3+k4)*(h/6);
end

plot(x,y); 
legend('ode45','Эйлер','Рунге 4 порядка');
hold off

%полученные результаты:
%необходимо изменить начальное условие
%заменив его на 1, получаем 4-ый график

%---------4-----------
y=dsolve('Dy=1/(y^3)','y(0)=1')

%встроенная функция
[T,Y] = ode45(@ur3, [0,1],1);

subplot(4,1,4);
plot(T,Y); 
title('dy/dt=1/y^3');
hold on

%метод Эйлера
F = @(t,y) 1/(y^3);
tI = 0;
tEnd = 3;
dt = 0.05;
t = tI:dt:tEnd;
y = zeros(size(t));
y(1) = 1;
for k = 2:numel(y)
    yPrime = F(t(k-1),y(k-1));
    y(k) = y(k-1) + dt*yPrime;
end

plot(t,y); 

%метод Рунге-Кута 4 порядка
f=@(x,y) 1/(y^3);
x0=0;
y0=1;
xn=3;
n=500;
h=(xn-x0)/n;
x=x0:h:xn;
y = zeros(size(x));
y(1)=y0;
for i=1:n
    k1=f(x(i),y(i));
    k2=f(x(i)+0.5*h,y(i)+0.5*k1*h);
    k3=f(x(i)+0.5*h,y(i)+0.5*k2*h);
    k4=f(x(i)+h,y(i)+k3*h);
    y(i+1)=y(i)+(k1+2*k2+2*k3+k4)*(h/6);
end

plot(x,y); 
legend('ode45','Эйлер','Рунге 4 порядка');
hold off